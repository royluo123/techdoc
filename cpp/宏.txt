C++ 宏定义将一个标识符定义为一个字符串，源程序中的该标识符均以指定的字符串来代替。前面已经说过，预处理命令不同于一般C++语句。因此预处理命令后通常不加分号。这并不是说所有的预处理命令后都不能有分号出现。由于宏定义只是用宏名对一个字符串进行简单的替换，因此如果在宏定义命令后加了分号，将会连同分号一起进行置换。

三种预处理功能

　　C++提供的编译预处理功能主要有以下三种：
　　（一） 宏定义
　　（二） 文件包含
　　（三） 条件编译
　　在C++中，我们一般用const定义符号常量。很显然，用const定义常量比用define定义常量更好。

使用宏定义注意点

　　在使用宏定义时应注意的是：
　　（a） 在书写#define 命令时，注意<宏名>和<字符串>之间用空格分开，而不是用等号连接。
　　（b） 使用#define定义的标识符不是变量，它只用作宏替换，因此不占有内存。
　　（c） 习惯上用大写字母表示<宏名>，这只是一种习惯的约定，其目的是为了与变量名区分，因为变量名
　　通常用小写字母。
　　如果某一个标识符被定义为宏名后，在取消该宏定义之前，不允许重新对它进行宏定义。取消宏定义使用如下命令：
　　#undef<标识符>
　　其中，undef是关键字。该命令的功能是取消对<标识符>已有的宏定义。被取消了宏定义的标识符，可以对它重新进行定义。
　　宏定义可以嵌套，已被定义的标识符可以用来定义新的标识符。例如：
　　#define PI 3.14159265
　　#define R 10
　　#define AREA (PI*R*R)


使用带参数宏定义注意点

　　在使用带参数的宏定义时需要注意的是：
　　（1）带参数的宏定义的<宏体>应写在一行上，如果需要写在多行上时，在每行结束时，使用续行符 "\"结
　　束，并在该符号后按下回车键，最后一行除外。
　　（2）在书写带参数的宏定义时，<宏名>与左括号之间不能出现空格，否则空格右边的部分都作为宏体。
　　例如：
　　#define ADD (x,y) x+y
　　将会把"（x,y）x+y"的一个整体作为被定义的字符串。
　　（3）定义带参数的宏时，宏体中与参数名相同的字符串适当地加上圆括号是十分重要的，这样能够避免
　　可能产生的错误。例如,对于宏定义：
　　#define SQ(x) x*x
　　当程序中出现下列语句：
　　m=SQ(a+b);
　　替换结果为：
　　m=a+b*a+b;
　　这可能不是我们期望的结果，如果需要下面的替换结果：
　　m=(a+b)*(a+b);
　　应将宏定义修改为：
　　#define SQ(x) (x)*(x)
　　对于带参的宏定义展开置换的方法是：在程序中如果有带实参的宏（如"SUB（2,3）"），则按"#define"命令行中指定的字符串从左到右进行置换。如果串中包含宏中的形参（如a、b），则将程序语句中相应的实参（可以是常量、变量或者表达式）代替形参，如果宏定义中的字符串中的字符不是参数字符（如a-b中的-号），则保留。这样就形成了置换的字符串。




在这里总结宏的使用方法 欢迎补充

1 条件include
如下
CODE

#ifndef MAIN_H_
#define MAIN_H_

其它内容

#endif

上面在看到头文件时会看到 作用就是阻止这个头文件被多次include
多次include就会出现重复的定义情况 所以需要在每个头文件中都使用这个定义

如果还不是很了解要怎样使用 可以看看 c的标准头文件 如fcntl.h




2 条件编译

如下
CODE

#ifdef _DEBUG
printf("this debug info\n");
#endif

如果没有定义_DEBUG宏的话 那么上面那一行是不会编译进去的 
但是定义了_DEBUG后 上面那行就会编译进去 可以写个简单的程序测试
CODE

#include <stdio.h>
int main()
{
#ifdef _DEBUG
printf("hello world\n");
#else
printf("no debug");
#endif
return 0;
}
